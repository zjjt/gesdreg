{"version":3,"sources":["meteor://ðŸ’»app/packages/apollo/src/main-server.js","meteor://ðŸ’»app/packages/apollo/src/main-client.js"],"names":["module","export","createApolloServer","getUserForContext","addCurrentUserToContext","watch","require","createMeteorNetworkInterface","v","exports","meteorClientConfig","graphqlExpress","graphiqlExpress","bodyParser","express","Meteor","WebApp","Accounts","check","defaultServerConfig","path","configServer","graphiql","isDevelopment","graphiqlPath","graphiqlOptions","passHeader","defaultGraphQLOptions","context","formatError","message","e","locations","debug","customOptions","customConfig","config","graphQLServer","use","json","req","customOptionsObject","options","loginToken","headers","userContext","console","error","endpointURL","connectHandlers","String","hashedToken","_hashLoginToken","users","rawCollection","findOne","currentUser","tokenInformation","services","resume","loginTokens","find","tokenInfo","expiresAt","_tokenExpiration","when","isExpired","Date","user","userId","_id","getMeteorLoginToken","createNetworkInterface","createBatchingNetworkInterface","defaultNetworkInterfaceConfig","uri","absoluteUrl","opts","useMeteorAccounts","batchingInterface","batchInterval","customNetworkInterfaceConfig","useBatchingInterface","interfaceToUse","interfaceArgument","networkInterface","isClient","Error","applyMiddlewareFn","request","next","meteorLoginToken","defaultClientConfig","ssrMode","isServer","customClientConfig","localStorageLoginToken","_storedLoginToken"],"mappings":"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","file":"/packages/apollo.js","sourcesContent":["import { graphqlExpress, graphiqlExpress } from 'apollo-server-express';\nimport bodyParser from 'body-parser';\nimport express from 'express';\n\nimport { Meteor } from 'meteor/meteor';\nimport { WebApp } from 'meteor/webapp';\nimport { Accounts } from 'meteor/accounts-base';\nimport { check } from 'meteor/check';\n\n// import the configuration functions from the client so they can be used\n// during server-side rendering for instance\nexport { createMeteorNetworkInterface, meteorClientConfig } from './main-client';\n\n// default server configuration object\nconst defaultServerConfig = {\n  // graphql endpoint\n  path: '/graphql',\n  // additional Express server configuration (enable CORS there for instance)\n  configServer: graphQLServer => {},\n  // enable GraphiQL only in development mode\n  graphiql: Meteor.isDevelopment,\n  // GraphiQL endpoint\n  graphiqlPath: '/graphiql',\n  // GraphiQL options (default: log the current user in your request)\n  graphiqlOptions: {\n    passHeader: \"'meteor-login-token': localStorage['Meteor.loginToken']\",\n  },\n};\n\n// default graphql options to enhance the graphQLExpress server\nconst defaultGraphQLOptions = {\n  // ensure that a context object is defined for the resolvers\n  context: {},\n  // error formatting\n  formatError: e => ({\n    message: e.message,\n    locations: e.locations,\n    path: e.path,\n  }),\n  // additional debug logging if execution errors occur in dev mode\n  debug: Meteor.isDevelopment,\n};\n\nexport const createApolloServer = (customOptions = {}, customConfig = {}) => {\n  // create a new server config object based on the default server config\n  // defined above and the custom server config passed to this function\n  const config = {\n    ...defaultServerConfig,\n    ...customConfig,\n  };\n\n  if (customConfig.graphiqlOptions) {\n    config.graphiqlOptions = {\n      ...defaultServerConfig.graphiqlOptions,\n      ...customConfig.graphiqlOptions,\n    };\n  }\n\n  // the Meteor GraphQL server is an Express server\n  const graphQLServer = express();\n\n  // enhance the GraphQL server with possible express middlewares\n  config.configServer(graphQLServer);\n\n  // GraphQL endpoint, enhanced with JSON body parser\n  graphQLServer.use(\n    config.path,\n    bodyParser.json(),\n    graphqlExpress(async req => {\n      try {\n        // graphqlExpress can accept a function returning the option object\n        const customOptionsObject =\n          typeof customOptions === 'function' ? customOptions(req) : customOptions;\n\n        // create a new apollo options object based on the default apollo options\n        // defined above and the custom apollo options passed to this function\n        const options = {\n          ...defaultGraphQLOptions,\n          ...customOptionsObject,\n        };\n\n        // get the login token from the headers request, given by the Meteor's\n        // network interface middleware if enabled\n        const loginToken = req.headers['meteor-login-token'];\n\n        // get the current user & the user id for the context\n        const userContext = await getUserForContext(loginToken);\n\n        // context can accept a function returning the context object\n        const context =\n          typeof options.context === 'function'\n            ? await options.context(userContext)\n            : { ...options.context, ...userContext };\n\n        // return the configured options to be used by the graphql server\n        return {\n          ...options,\n          context,\n        };\n      } catch (error) {\n        // something went bad when configuring the graphql server, we do not\n        // swallow the error and display it in the server-side logs\n        console.error(\n          '[Meteor Apollo Integration] Something bad happened when handling a request on the GraphQL server. Your GraphQL server is not working as expected:',\n          error\n        );\n\n        // return the default graphql options anyway\n        return defaultGraphQLOptions;\n      }\n    })\n  );\n\n  // Start GraphiQL if enabled\n  if (config.graphiql) {\n    // GraphiQL endpoint\n    graphQLServer.use(\n      config.graphiqlPath,\n      graphiqlExpress({\n        // GraphiQL options\n        ...config.graphiqlOptions,\n        // endpoint of the graphql server where to send requests\n        endpointURL: config.path,\n      })\n    );\n  }\n  // this binds the specified paths to the Express server running Apollo + GraphiQL\n  WebApp.connectHandlers.use(graphQLServer);\n};\n\nexport const getUserForContext = async loginToken => {\n  // there is a possible current user connected!\n  if (loginToken) {\n    // throw an error if the token is not a string\n    check(loginToken, String);\n\n    // the hashed token is the key to find the possible current user in the db\n    const hashedToken = Accounts._hashLoginToken(loginToken);\n\n    // get the possible current user from the database\n    // note: no need of a fiber aware findOne + a fiber aware call break tests\n    // runned with practicalmeteor:mocha if eslint is enabled\n    const currentUser = await Meteor.users.rawCollection().findOne({\n      'services.resume.loginTokens.hashedToken': hashedToken,\n    });\n\n    // the current user exists\n    if (currentUser) {\n      // find the right login token corresponding, the current user may have\n      // several sessions logged on different browsers / computers\n      const tokenInformation = currentUser.services.resume.loginTokens.find(\n        tokenInfo => tokenInfo.hashedToken === hashedToken\n      );\n\n      // get an exploitable token expiration date\n      const expiresAt = Accounts._tokenExpiration(tokenInformation.when);\n\n      // true if the token is expired\n      const isExpired = expiresAt < new Date();\n\n      // if the token is still valid, give access to the current user\n      // information in the resolvers context\n      if (!isExpired) {\n        // return a new context object with the current user & her id\n        return {\n          user: currentUser,\n          userId: currentUser._id,\n        };\n      }\n    }\n  }\n\n  return {};\n};\n\n// take the existing context and return a new extended context with the current\n// user if relevant (i.e. valid login token)\nexport const addCurrentUserToContext = async (context, loginToken) => {\n  const userContext = await getUserForContext(loginToken);\n  return {\n    ...context,\n    ...userContext,\n  };\n};\n","import { createNetworkInterface, createBatchingNetworkInterface } from 'apollo-client';\n\nimport { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\n\n// default network interface configuration object\nconst defaultNetworkInterfaceConfig = {\n  // default graphql server endpoint: ROOT_URL/graphql\n  // ex: http://locahost:3000/graphql, or https://www.my-app.com/graphql\n  uri: Meteor.absoluteUrl('graphql'),\n  // additional fetch options like `credentials` or `headers`\n  opts: {},\n  // enable the Meteor User Accounts middleware to identify the user with\n  // every request thanks to their login token\n  useMeteorAccounts: true,\n  // use a BatchingNetworkInterface by default instead of a NetworkInterface\n  batchingInterface: true,\n  // default batch interval\n  batchInterval: 10,\n};\n\n// create a pre-configured network interface\nexport const createMeteorNetworkInterface = (customNetworkInterfaceConfig = {}) => {\n  // create a new config object based on the default network interface config\n  // defined above and the custom network interface config passed to this function\n  const config = {\n    ...defaultNetworkInterfaceConfig,\n    ...customNetworkInterfaceConfig,\n  };\n\n  // this will be true true if a BatchingNetworkInterface is meant to be used\n  // with a correct poll interval\n  const useBatchingInterface = config.batchingInterface && typeof config.batchInterval === 'number';\n\n  // allow the use of a batching network interface\n  const interfaceToUse = useBatchingInterface\n    ? createBatchingNetworkInterface\n    : createNetworkInterface;\n\n  // http://dev.apollodata.com/core/apollo-client-api.html#NetworkInterfaceOptions\n  const interfaceArgument = {\n    uri: config.uri,\n    opts: config.opts,\n  };\n\n  // http://dev.apollodata.com/core/network.html#BatchingExample\n  if (useBatchingInterface) {\n    interfaceArgument.batchInterval = config.batchInterval;\n  }\n\n  // configure the (batching?) network interface with the config defined above\n  const networkInterface = interfaceToUse(interfaceArgument);\n\n  // handle the creation of a Meteor User Accounts middleware\n  if (config.useMeteorAccounts) {\n    try {\n      // throw an error if someone tries to specify the login token\n      // manually from the client\n      if (Meteor.isClient && config.loginToken) {\n        throw Error(\n          '[Meteor Apollo Integration] The current user is not handled with your GraphQL operations: you are trying to pass a login token to an Apollo Client instance defined client-side. This is only allowed during server-side rendering, please check your implementation.'\n        );\n      }\n\n      // dynamic middleware function name depending on the interface used\n      const applyMiddlewareFn = useBatchingInterface ? 'applyBatchMiddleware' : 'applyMiddleware';\n\n      // add a middleware handling the current user to the network interface\n      networkInterface.use([\n        {\n          [applyMiddlewareFn](request, next) {\n            // get the login token on a per-request basis\n            const meteorLoginToken = getMeteorLoginToken(config);\n\n            // no token, meaning no user connected, just go to next possible middleware\n            if (!meteorLoginToken) {\n              next();\n            }\n\n            // create the header object if needed.\n            if (!request.options.headers) {\n              request.options.headers = {};\n            }\n\n            // add the login token to the request headers\n            request.options.headers['meteor-login-token'] = meteorLoginToken;\n\n            // go to next middleware\n            next();\n          },\n        },\n      ]);\n    } catch (error) {\n      // catch the potential error sent by if a login token is manually set client-side\n      console.error(error);\n    }\n  }\n\n  return networkInterface;\n};\n\n// default Apollo Client configuration object\nconst defaultClientConfig = {\n  // setup ssr mode if the client is configured server-side (ex: for SSR)\n  ssrMode: Meteor.isServer,\n};\n\n// create a new client config object based on the default Apollo Client config\n// defined above and the client config passed to this function\nexport const meteorClientConfig = (customClientConfig = {}) => ({\n  // default network interface preconfigured, the network interface key is set\n  // there to so that `createMeteorNetworkInterface` is executed only when\n  // `meteorClientConfig` is called.\n  networkInterface: createMeteorNetworkInterface(),\n  ...defaultClientConfig,\n  ...customClientConfig,\n});\n\n// grab the token from the storage or config to be used in the network interface creation\nexport const getMeteorLoginToken = (config = {}) => {\n  // possible cookie login token created by meteorhacks:fast-render\n  // and passed to the Apollo Client during server-side rendering\n  const { loginToken = null } = config;\n\n  // Meteor accounts-base login token stored in local storage,\n  // only exists client-side as of Meteor 1.4, will exist with Meteor 1.5\n  const localStorageLoginToken = Meteor.isClient && Accounts._storedLoginToken();\n\n  // return a meteor login token if existing\n  // ex: grabbed from local storage or passed during server-side rendering\n  return localStorageLoginToken || loginToken;\n};\n"]}